{% set base_dd_tags = "env:" ~ global.environmentName ~ ", service: subgraph" %}

subgraph:
  image:
    repository: "{{ subgraph.image.repository | default('towns-subgraph') }}"
    tag: "{{ subgraph.image.tag | default('latest') }}"
    pullPolicy: "{{ subgraph.image.pullPolicy | default('IfNotPresent') }}"

  service:
    type: ClusterIP
    port: 42069
    targetPort: 42069

  ingress:
    enabled: {{ subgraph.ingress.enabled | default('true') | lower }}
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/certificate-arn: {{ subgraph.ingress.certificateArn | default('') }}
    hosts:
      - host: "subgraph.{{ global.environmentName }}.towns.com"
        paths:
          - path: /*
            pathType: ImplementationSpecific

  resources:
    {{ subgraph.resources | default({
      "limits": {
        "cpu": 1,
        "memory": "2Gi"
      },
      "requests": {
        "cpu": 0.5,
        "memory": "1Gi"
      }
    }) | to_yaml | indent(4, True) }}

  # Environment variables
  env:
    - name: RIVER_ENV
      value: "{{ global.environmentName }}"
    - name: PONDER_PORT
      value: "42069"
    - name: PONDER_ENVIRONMENT
      value: "{{ global.environmentName }}"
    - name: PONDER_RPC_URL_1
      valueFrom:
        secretKeyRef:
          name: subgraph-secrets
          key: rpc_url
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: subgraph-secrets
          key: database_url

  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: 42069
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 42069
    initialDelaySeconds: 30
    periodSeconds: 10

  # Security settings
  podSecurityContext:
    fsGroup: 1000
  
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  # Node selector, affinity, and tolerations for pod assignment
  nodeSelector: {}
  tolerations: []
  affinity: {} 
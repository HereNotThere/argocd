{% set base_dd_tags = "env:" ~ global.environmentName ~ ", service: subgraph" %}

image:
  repository: "{{ subgraph.image.repository | default('public.ecr.aws/h5v6m2x1/subgraph') }}"
  tag: "{{ subgraph.image.tag | default('latest') }}"
  pullPolicy: "{{ subgraph.image.pullPolicy | default('IfNotPresent') }}"

service:
  type: ClusterIP
  port: 42069
  targetPort: 42069

resources:
  limits:
    cpu: {{ subgraph.resources.limits.cpu | default(1) }}
    memory: {{ subgraph.resources.limits.memory | default('2Gi') }}
  requests:
    cpu: {{ subgraph.resources.requests.cpu | default(0.5) }}
    memory: {{ subgraph.resources.requests.memory | default('1Gi') }}

# Environment variables
env:
  - name: RIVER_ENV
    value: "{{ global.environmentName }}"
  - name: PONDER_PORT
    value: "42069"
  - name: PONDER_ENVIRONMENT
    value: "{{ global.environmentName }}"
  - name: PONDER_RPC_URL_1
    valueFrom:
      secretKeyRef:
        name: subgraph-secrets
        key: base_chain_rpc_url
  - name: DATABASE_URL
    valueFrom:
      secretKeyRef:
        name: subgraph-secrets
        key: database_url
  - name: PONDER_START_BLOCK
    value: "{{ ponder_start_block | default('22890725') }}"
  - name: PONDER_CONFIG
    value: "ponder.config.{{ global.environmentName }}.ts"

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: 42069
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /ready
    port: 42069
  initialDelaySeconds: 30
  periodSeconds: 10

# Security settings
podSecurityContext:
  fsGroup: 1000

securityContext:
  {}

# Node selector, affinity, and tolerations for pod assignment
nodeSelector: {}
tolerations: []
affinity: {}
rpc-gateway:
  image:
    pullPolicy: Always
    tag: "22ff9db"

  podAnnotations:
    ad.datadoghq.com/rpc-gateway.logs: '[{"service": "rpc-gateway"}]' 
    ad.datadoghq.com/rpc-gateway.checks: |
         {
            "openmetrics": {
              "instances": [
                {
                  "prometheus_url": "http://%%host%%:8082/metrics",
                  "namespace": "rpc-gateway",
                  "metrics": ["*"]
                }
              ]
            }
         }

  resources: 
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1"

  service:
    type: LoadBalancer
    port: 8080
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  metrics:
    enabled: true
    host: "127.0.0.1"
    port: 8082

  projects:
    - name: "nodes"

    - name: "web-app"
      key: "$WEB_APP_KEY"

  config:
    server:
      host: "0.0.0.0"
      port: 8080
    
    cache:
      type: "redis"
      url: "redis://rpc-gateway-redis-master.default.svc.cluster.local:6379"

    loadBalancing:
      strategy: "primary_only"

    errorHandling:
      type: "retry"
      maxRetries: 3
      retryDelay: "1s"
      jitter: true

    chains:
      {{ chains.base.chainId }}:
        upstreams:
          - url: "$UPSTREAM_URL_BASE_ALCHEMY"
            timeout: "10s"
            weight: 1

  # Environment variables to be set in the container
  env:
    - name: UPSTREAM_URL_BASE_ALCHEMY
      valueFrom:
        secretKeyRef:
          name: rpc-gateway-secrets
          key: upstream_url_base_alchemy

    - name: WEB_APP_PROJECT_KEY
      valueFrom:
        secretKeyRef:
          name: rpc-gateway-secrets
          key: web_app_project_key

redis:
  architecture: standalone

  auth:
    enabled: false

  master:
    persistence:
      enabled: false

    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1"

  replica:
    replicaCount: 0
name: Update Infra

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        type: choice
        required: true
        default: "gamma"
        options:
          - "gamma"
          - "alpha"
          - "omega"
          - "delta"
      notificationServiceImageTag:
        description: "notificationService.image.tag"
        type: string
        required: false
      riverNodeImageTag:
        description: "riverNode.image.tag"
        type: string
        required: false
      appRegistryServiceImageTag:
        description: "appRegistryService.image.tag"
        type: string
        required: false
      rpcGatewayImageTag:
        description: "rpcGateway.image.tag"
        type: string
        required: false
      subgraphImageTag:
        description: "subgraph.image.tag"
        type: string
        required: false
      xchainMonitorImageTag:
        description: "xchainMonitor.image.tag"
        type: string
        required: false
      notificationSenditImageTag:
        description: "notificationSendit.image.tag"
        type: string
        required: false

  repository_dispatch:
    types: [update-infra]

jobs:
  update_infra:
    permissions: write-all
    runs-on: "ubuntu-latest"
    timeout-minutes: 5

    concurrency:
      group: deploy-${{ github.event.inputs.environment || github.event.client_payload.environment }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install python dependencies
        run: pip install -r requirements.txt

      - name: Install node dependencies
        run: yarn install

      - name: Determine values to update
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Workflow dispatch event detected"
            ENV="${{ github.event.inputs.environment }}"
            NOTIFICATION_SERVICE_IMAGE_TAG="${{ github.event.inputs.notificationServiceImageTag }}"
            RIVER_NODE_IMAGE_TAG="${{ github.event.inputs.riverNodeImageTag }}"
            APP_REGISTRY_SERVICE_IMAGE_TAG="${{ github.event.inputs.appRegistryServiceImageTag }}"
            RPC_GATEWAY_IMAGE_TAG="${{ github.event.inputs.rpcGatewayImageTag }}"
            SUBGRAPH_IMAGE_TAG="${{ github.event.inputs.subgraphImageTag }}"
            XCHAIN_MONITOR_IMAGE_TAG="${{ github.event.inputs.xchainMonitorImageTag }}"
            NOTIFICATION_SENDIT_IMAGE_TAG="${{ github.event.inputs.notificationSenditImageTag }}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "Repository dispatch event detected"
            ENV="${{ github.event.client_payload.environment }}"
            NOTIFICATION_SERVICE_IMAGE_TAG="${{ github.event.client_payload.notificationServiceImageTag }}"
            RIVER_NODE_IMAGE_TAG="${{ github.event.client_payload.riverNodeImageTag }}"
            APP_REGISTRY_SERVICE_IMAGE_TAG="${{ github.event.client_payload.appRegistryServiceImageTag }}"
            RPC_GATEWAY_IMAGE_TAG="${{ github.event.client_payload.rpcGatewayImageTag }}"
            SUBGRAPH_IMAGE_TAG="${{ github.event.client_payload.subgraphImageTag }}"
            XCHAIN_MONITOR_IMAGE_TAG="${{ github.event.client_payload.xchainMonitorImageTag }}"
            NOTIFICATION_SENDIT_IMAGE_TAG="${{ github.event.client_payload.notificationSenditImageTag }}"
          else
            echo "Unknown event type: ${{ github.event_name }}, exiting"
            exit 1
          fi

          if [[ -z "$ENV" ]]; then
            echo "Environment not set, exiting"
            exit 1
          else
            echo "Environment set to $ENV"
          fi

          VALUES=""

          # if the notification service tag is set
          if [[ -n "$NOTIFICATION_SERVICE_IMAGE_TAG" ]]; then
            VALUES="notificationService.image.tag=$NOTIFICATION_SERVICE_IMAGE_TAG"
          fi

          # if the river node tag is set
          if [[ -n "$RIVER_NODE_IMAGE_TAG" ]]; then
            VALUES="$VALUES riverNode.image.tag=$RIVER_NODE_IMAGE_TAG"
          fi

          if [[ -n "$APP_REGISTRY_SERVICE_IMAGE_TAG" ]]; then
            VALUES="$VALUES appRegistryService.image.tag=$APP_REGISTRY_SERVICE_IMAGE_TAG"
          fi

          # if the rpc gateway tag is set
          if [[ -n "$RPC_GATEWAY_IMAGE_TAG" ]]; then
            VALUES="$VALUES rpcGateway.image.tag=$RPC_GATEWAY_IMAGE_TAG"
          fi

          # if the subgraph tag is set
          if [[ -n "$SUBGRAPH_IMAGE_TAG" ]]; then
            VALUES="$VALUES subgraph.image.tag=$SUBGRAPH_IMAGE_TAG"
          fi

          # if the xchain monitor tag is set
          if [[ -n "$XCHAIN_MONITOR_IMAGE_TAG" ]]; then
            VALUES="$VALUES xchainMonitor.image.tag=$XCHAIN_MONITOR_IMAGE_TAG"
          fi

          # if the notification sendit tag is set
          if [[ -n "$NOTIFICATION_SENDIT_IMAGE_TAG" ]]; then
            VALUES="$VALUES notificationSendit.image.tag=$NOTIFICATION_SENDIT_IMAGE_TAG"
          fi

          echo "VALUES=${VALUES}" >> $GITHUB_ENV
          echo "ENV=${ENV}" >> $GITHUB_ENV

      - name: Update values
        env:
          ENV: ${{ env.ENV }}
          VALUES: ${{ env.VALUES }}
        run: ENV=${ENV} VALUES=${VALUES} make set_values

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add .

          # Check if there are any changes
          if git diff --cached --exit-code; then
            echo "No changes to commit."
            exit 0
          fi

          # Get the date and time
          DATE=$(date)

          git commit -m "${DATE} - Update infra for ${ENV}"

          # A more robust retry logic with proper rebasing
          n=0
          until [ $n -ge 10 ]
          do
            # First fetch the latest changes
            git fetch origin ${{ github.ref_name }}
            
            # Check if we need to rebase
            if git rev-parse HEAD origin/${{ github.ref_name }} | uniq | wc -l | grep -q 2; then
              echo "Local and remote HEADs are different, rebasing..."
              # Use rebase to incorporate remote changes while preserving our commit
              git rebase origin/${{ github.ref_name }}
              
              # If rebase failed (conflict), abort and retry
              if [ $? -ne 0 ]; then
                echo "Rebase failed, conflicts detected. Aborting rebase and retrying..."
                git rebase --abort
                n=$[$n+1]
                sleep $(( 15 + $RANDOM % 30 ))  # Add jitter to reduce collision probability
                continue
              fi
            fi
            
            # Try to push our changes
            if git push origin ${{ github.ref_name }}; then
              echo "Successfully pushed changes!"
              break
            else
              echo "Push failed, retrying..."
              n=$[$n+1]
              sleep $(( 15 + $RANDOM % 30 ))  # Add jitter to reduce collision probability
            fi
          done

          if [ $n -ge 10 ]; then
            echo "Failed to push changes to GitHub after 10 attempts."
            exit 1
          else
            echo "Changes pushed to GitHub."
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
